HTTP_HEADERS = {
	'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25'
}

####################################################################################################
def NormalizeURL(url):
	return url

####################################################################################################
def MetadataObjectForURL(url):
	try:
		channelInfo = JSON.ObjectFromURL(url)
		
		return EpisodeObject(
			title = channelInfo['title'],
			summary = channelInfo['description'],
			thumb = channelInfo['extra_big_logo']
		)
	except:
		pass	

####################################################################################################
def MediaObjectsForURL(url):
	return [
		MediaObject(
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [
				PartObject(
					key = HTTPLiveStreamURL(Callback(PlayHLS, url = url))
				)
			]
		)
	]

####################################################################################################
@indirect
def PlayHLS(url):
	channelInfo = JSON.ObjectFromURL(url, cacheTime = 0, headers = HTTP_HEADERS)

	for stream in channelInfo['streams']:
		if Prefs['preferhd']:
			if int(stream['watch-timeout']) >= 86000:
				return IndirectResponse(
					VideoClipObject,
					key = HTTPLiveStreamURL(stream['url'])
				)
		elif stream['quality'].lower() == 'low':
			return IndirectResponse(
				VideoClipObject,
				key = HTTPLiveStreamURL(stream['url'])
			)		

	raise Ex.MediaNotAvailable
